{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set wrapperless_bundle_machine_names = [
    'from_library',
  ]
%}

{% set settings_custom_id = paragraph.getBehaviorSetting('custom_paragraph_behaviors_paragraph_custom_id_classes', 'custom_id') %}
{% set settings_custom_classes = paragraph.getBehaviorSetting('custom_paragraph_behaviors_paragraph_custom_id_classes', 'custom_classes') %}
{% set custom_id = settings_custom_id ? settings_custom_id : 'paragraph-' ~ paragraph.id() %}

{% set view_mode = content.field_thumbs_display_mode['#items'].value %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    settings_custom_classes ? settings_custom_classes,
    'custom--video-group',
    'custom--video-group-autoplay-' ~ content.field_autoplay_next_video|render|striptags|trim|lower ?: 'false',
    'custom--video-group-mode-' ~ view_mode,
  ]
%}

{% if view_mode == 'teaser_carousel' %}
  {{ attach_library('demo_design_system_theme/slick') }}
{% endif %}

{% block paragraph %}
  {% if paragraph.bundle not in wrapperless_bundle_machine_names %}
  <div{{ attributes.addClass(classes).setAttribute('id', custom_id) }}>
  {% endif %}

    {% block content %}
      {{ content.field_text }}
      <div class="custom--all-video-wrapper">
        <div class="custom--big-player">
          {{ content.field_paragraph }}
        </div>
        <div class="custom--video-thumbs-wrapper">
          {{ content.field_paragraph }}
          {% if view_mode == 'teaser_grid' %}
            <a href="#" class="custom--video-more custom--video-show-more">
              {{ ('Show more videos')|t }}
            </a>
            <a href="#" class="custom--video-more custom--video-show-less d-none">
              {{ ('Show less videos')|t }}
            </a>
          {% endif %}
          {% if view_mode == 'teaser_carousel' %}
            <div class="slider__progress" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" >
              <span class="slider__label a11y">0% completed</span>
            </div>
          {% endif %}
        </div>
      </div>
    {% endblock %}

  {% if paragraph.bundle not in wrapperless_bundle_machine_names %}
  </div>
  {% endif %}
{% endblock paragraph %}
