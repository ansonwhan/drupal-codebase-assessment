{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set settings_custom_id = paragraph.getBehaviorSetting('custom_paragraph_behaviors_paragraph_custom_id_classes', 'custom_id') %}
{% set settings_custom_classes = paragraph.getBehaviorSetting('custom_paragraph_behaviors_paragraph_custom_id_classes', 'custom_classes') %}
{% set custom_id = settings_custom_id ? settings_custom_id : 'paragraph-' ~ paragraph.id() %}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  settings_custom_classes ? settings_custom_classes,
  'slide-wrapper',
  content.field_text_position['#items'].value,
] %}
{% block paragraph %}
  <div{{ attributes.addClass(classes).setAttribute('id', custom_id) }}>
    {% block content %}
      {{ content.field_image }}

      <div class="jumbotron jumbotron-container position-absolute {{ content.field_backdrop|render|striptags|trim|lower == 'true' ? '' : 'text-white' }} {{ content.field_text_position['#items'].value == 'text-left' or content.field_text_position['#items'].value == 'text-right' ? 'w-90' : '' }}">
        {% if content.field_text_position['#items'].value == 'text-left' %}
          <div class="row">
            <div class="col-sm-6 text-container">
              {% if content.field_backdrop|render|striptags|trim|lower == 'true' %}
              <div class="opaque-background">
                {% endif %}
                {{ content.field_text }}
                <p>
                  {{ content.field_link }}
                </p>
                {% if content.field_backdrop|render|striptags|trim|lower == 'true' %}
              </div>
              {% endif %}
            </div>
          </div>
        {% elseif content.field_text_position['#items'].value == 'text-right' %}
          <div class="row">
            <div class="col-sm-6 offset-sm-6 text-container">
              {% if content.field_backdrop|render|striptags|trim|lower == 'true' %}
              <div class="opaque-background">
                {% endif %}
                {{ content.field_text }}
                <p>
                  {{ content.field_link }}
                </p>
                {% if content.field_backdrop|render|striptags|trim|lower == 'true' %}
              </div>
              {% endif %}
            </div>
          </div>
        {% else %}
          {% if content.field_backdrop|render|striptags|trim|lower == 'true' %}
            <div class="opaque-background">
          {% endif %}
          {{ content.field_text }}
          <p>
            {{ content.field_link }}
          </p>
          {% if content.field_backdrop|render|striptags|trim|lower == 'true' %}
            </div>
          {% endif %}
        {% endif %}
      </div>


    {% endblock %}


  </div>
{% endblock paragraph %}
